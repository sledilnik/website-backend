# Generated by Django 3.1.5 on 2021-01-25 19:33

from django.db import migrations, models
import django.db.models.deletion
import sledilnik.easymde.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='IntervalKind',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('name_sl', models.CharField(max_length=100, null=True, unique=True, verbose_name='Name')),
                ('name_en', models.CharField(max_length=100, null=True, unique=True, verbose_name='Name')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('description', sledilnik.easymde.models.MarkdownField(blank=True, null=True, verbose_name='Description')),
                ('description_sl', sledilnik.easymde.models.MarkdownField(blank=True, null=True, verbose_name='Description')),
                ('description_en', sledilnik.easymde.models.MarkdownField(blank=True, null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Prediction interval kind',
                'verbose_name_plural': 'Prediction interval kinds',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Model',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('name_sl', models.CharField(max_length=100, null=True, unique=True, verbose_name='Name')),
                ('name_en', models.CharField(max_length=100, null=True, unique=True, verbose_name='Name')),
                ('password', models.CharField(help_text='Used to authenticate against the API. Hashed form.', max_length=100, verbose_name='Password')),
                ('www', models.URLField(blank=True, null=True, verbose_name='Home page')),
                ('www_sl', models.URLField(blank=True, null=True, verbose_name='Home page')),
                ('www_en', models.URLField(blank=True, null=True, verbose_name='Home page')),
                ('description', sledilnik.easymde.models.MarkdownField(blank=True, null=True, verbose_name='Description')),
                ('description_sl', sledilnik.easymde.models.MarkdownField(blank=True, null=True, verbose_name='Description')),
                ('description_en', sledilnik.easymde.models.MarkdownField(blank=True, null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Model',
                'verbose_name_plural': 'Models',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
            ],
            options={
                'verbose_name': 'Person',
                'verbose_name_plural': 'People',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Scenario',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('name_sl', models.CharField(max_length=100, null=True, unique=True, verbose_name='Name')),
                ('name_en', models.CharField(max_length=100, null=True, unique=True, verbose_name='Name')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('description', sledilnik.easymde.models.MarkdownField(blank=True, null=True, verbose_name='Description')),
                ('description_sl', sledilnik.easymde.models.MarkdownField(blank=True, null=True, verbose_name='Description')),
                ('description_en', sledilnik.easymde.models.MarkdownField(blank=True, null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Modelling scenario',
                'verbose_name_plural': 'Modelling scenarios',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated')),
                ('date', models.DateField(verbose_name='Date')),
                ('interval_kind', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='modeling.intervalkind', verbose_name='Interval kind')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='modeling.model', verbose_name='Model')),
                ('scenario', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='modeling.scenario', verbose_name='Scenario')),
            ],
            options={
                'verbose_name': 'Prediction',
                'verbose_name_plural': 'Predictions',
                'ordering': ['-date', 'model__name'],
                'unique_together': {('date', 'model', 'scenario', 'interval_kind')},
            },
        ),
        migrations.AddField(
            model_name='model',
            name='contacts',
            field=models.ManyToManyField(to='modeling.Person', verbose_name='Contacts'),
        ),
        migrations.CreateModel(
            name='PredictionData',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField(verbose_name='Date')),
                ('hospitalized', models.PositiveIntegerField(verbose_name='Hospitalized')),
                ('hospitalizedLowerBound', models.PositiveIntegerField(blank=True, null=True, verbose_name='Hospitalized lower bound')),
                ('hospitalizedUpperBound', models.PositiveIntegerField(blank=True, null=True, verbose_name='Hospitalized upper bound')),
                ('icu', models.PositiveIntegerField(verbose_name='ICU')),
                ('icuLowerBound', models.PositiveIntegerField(blank=True, null=True, verbose_name='ICU lower bound')),
                ('icuUpperBound', models.PositiveIntegerField(blank=True, null=True, verbose_name='ICU upper bound')),
                ('deceased', models.PositiveIntegerField(verbose_name='Deceased')),
                ('deceasedLowerBound', models.PositiveIntegerField(blank=True, null=True, verbose_name='Deceased lower bound')),
                ('deceasedUpperBound', models.PositiveIntegerField(blank=True, null=True, verbose_name='Deceased upper bound')),
                ('deceasedToDate', models.PositiveIntegerField(verbose_name='DeceasedToDate')),
                ('deceasedToDateLowerBound', models.PositiveIntegerField(blank=True, null=True, verbose_name='Deceased todate lower bound')),
                ('deceasedToDateUpperBound', models.PositiveIntegerField(blank=True, null=True, verbose_name='Deceased todate upper bound')),
                ('prediction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data', to='modeling.prediction', verbose_name='Prediction')),
            ],
            options={
                'verbose_name': 'Prediction data',
                'verbose_name_plural': 'Prediction data',
                'ordering': ['date', 'prediction'],
                'unique_together': {('prediction', 'date')},
            },
        ),
    ]
